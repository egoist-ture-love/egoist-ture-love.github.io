<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020-4-10学习笔记</title>
    <url>/2020-4-10%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记</title>
    <url>/%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><h2 id="软件的简单介绍"><a href="#软件的简单介绍" class="headerlink" title="软件的简单介绍"></a>软件的简单介绍</h2><h3 id="软件架构分两种"><a href="#软件架构分两种" class="headerlink" title="软件架构分两种"></a>软件架构分两种</h3><h4 id="1-C-S-架构"><a href="#1-C-S-架构" class="headerlink" title="1.C/S 架构"></a>1.C/S 架构</h4><blockquote>
<p>c 表示客户端（客户用来使用软件） s 表示服务器（服务器用来处理业务逻辑）<br>特点：<br>    1.客户端与服务器同时更新<br>    2.软件使用前必须安装<br>    3.C/S框架不能跨平台使用<br>    4.C/S使用的是自有协议 保密较好</p>
</blockquote>
<h4 id="2-B-S-架构"><a href="#2-B-S-架构" class="headerlink" title="2.B/S 架构"></a>2.B/S 架构</h4><blockquote>
<p>B/S本质也是C/S只不过是用浏览器为载体<br>特点：<br>    1.软件不必安装 直接用浏览器检索就可以<br>    2.软件更新时客户端不必更新<br>    3.可以跨平台，只要系统中有浏览器就可以使用<br>    4.B/S使用的是http协议相对来说不是那么安全</p>
</blockquote>
<h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2><blockquote>
<p>网页设计师根据要求设计软件 –&gt; 前端工程师将设计做成静态网页 –&gt; 后台工程师将静态网页修改为动态网页</p>
</blockquote>
<h2 id="主要学习内容"><a href="#主要学习内容" class="headerlink" title="主要学习内容"></a>主要学习内容</h2><blockquote>
<p>结构html 表现css  行为 javascrip</p>
</blockquote>
<h3 id="HTML是什么"><a href="#HTML是什么" class="headerlink" title="HTML是什么"></a>HTML是什么</h3><blockquote>
<p>HTML是超文本标记语言</p>
<blockquote>
<p>文本是指只能显示文字 图片音频等一概用不了<br>而超文本可以使我们跳转到非文本语言<br>标记就是标签的意思</p>
</blockquote>
</blockquote>
<h3 id="标准的HTML结构"><a href="#标准的HTML结构" class="headerlink" title="标准的HTML结构"></a>标准的HTML结构</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   这个是html的注释并不会在页面中显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>    <span class="comment">&lt;!-- html根目录 一个html只能有一个根目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>   <span class="comment">&lt;!--head标签内容不会直接页面显示 但是会帮助浏览器检索 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!-- 网页的标题标签 默认显示在浏览器标题栏中，搜索引擎会率先检索这个中的内容，title是对搜索引擎中最重要的内容，会影响在搜索引擎的排名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote>
<p>属性：通过属性来设置标签和处理标签中的内容，可以在开始标签中加内容 属性就是一个名值对的内容  属性名 = “属性值”</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">"red"</span>&gt;</span>一级<span class="tag">&lt;/<span class="name">font</span>&gt;</span>标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以查看手册来学习</p>
<h4 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h4><blockquote>
<p>需要让浏览器知道是哪种格式防止进入怪异模式<br>需要在html前面加入<!doctype html> doctype大小写都可以</p>
</blockquote>
<h3 id="各种标签"><a href="#各种标签" class="headerlink" title="各种标签"></a>各种标签</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>html有6种标题 和 markdown一样 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>虽然大小是可以调整的但是重要程度是无法改变的，浏览器检索完title就检索h1</p>
<h4 id="p标签"><a href="#p标签" class="headerlink" title="p标签"></a>p标签</h4><blockquote>
<p>p标签是段落标签 表示一段话</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 这是一段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一段<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>html中空格和回车无论多少都当作一个空格 换行有固定的标签</p>
</blockquote>
<h4 id="br标签"><a href="#br标签" class="headerlink" title="br标签"></a>br标签</h4><blockquote>
<p>br标签是一个回车标签，也是自动结束标签,&lt;标签名 空格/&gt;</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 这是一段<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    这是另一段<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="hr标签"><a href="#hr标签" class="headerlink" title="hr标签"></a>hr标签</h4><blockquote>
<p>hr也是一个自结束标签，是一条分割线</p>
</blockquote>
<h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><blockquote>
<p>用实体来表示特殊字符<br>语法：&amp;实体名字；</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">＞ <span class="symbol">&amp;lt;</span></span><br><span class="line">＜ <span class="symbol">&amp;gt;</span></span><br><span class="line">空格 <span class="symbol">&amp;nbsp;</span></span><br><span class="line">版权符号 <span class="symbol">&amp;copy;</span></span><br></pre></td></tr></table></figure>
<p>具体查手册吧</p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>img 是一个自解数标签<br>属性src:表示外部图片路径<br>可以使用../来返回上一级目录，有几集目录返回几集，下级目录 文件名/<br>alt:设置图片不能显示时候对图片描述<br>width:图片的宽度以像素px为单位<br>height:图片的高度以像素px为单位</p>
</blockquote>
<h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h4><p>meta标签可以设置网页中关键字</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"javascrip,html,前端"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>meta标签可以设置网页中的描述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"小白的学习"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>meta标签可以设置重定向 3秒后跳转</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"3;url=http://egoist.ltd/"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h4><blockquote>
<p>使用内联框架可以引用一个外部页面<br>使用iframe开创建内联框架 ，但是内联框架中的内容不会被浏览器检索<br>属性：<br>src<br>width<br>height<br>name:可以进行命名</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://egoist.ltd/"</span> <span class="attr">name</span> =<span class="string">"blog"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="a标签"><a href="#a标签" class="headerlink" title="a标签"></a>a标签</h4><blockquote>
<p>a标签是超链接标签<br>属性是href标签指向相对路径或者完整地址 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">"http://egoist.ltd/"</span>&gt;</span>这是我的blog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>a标签中打开网页可以在原页面打开，也可以新开打开</p>
<blockquote>
<p>target=”_self”在当前页面打开<br>target=”_blank”新开页面打开<br>也可以设置一个name打开内联页面<br>如果不知道跳转的页面用#表示</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">"http://egoist.ltd/"</span> <span class="attr">target</span>=<span class="string">"_self"</span> <span class="attr">name</span>=<span class="string">"blog"</span> &gt;</span>这是我的blog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果不知道跳转的页面用#表示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_self"</span> <span class="attr">name</span>=<span class="string">"blog"</span> &gt;</span>这是我的blog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果使用#占用点击时候会跳转到顶部<br>跳转邮箱</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> =<span class="string">"mailto:邮箱地址"</span> <span class="attr">target</span>=<span class="string">"_self"</span> <span class="attr">name</span>=<span class="string">"blog"</span> &gt;</span>这是我的blog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="center标签"><a href="#center标签" class="headerlink" title="center标签"></a>center标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>中间是居中的内容<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="id属性"><a href="#id属性" class="headerlink" title="id属性"></a>id属性</h4><p>每个html都可以定义一个id属性，跳转的话可以直接用id后的名字</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>  <span class="attr">id</span>=<span class="string">"bottom"</span><span class="attr">href</span> =<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_self"</span> <span class="attr">name</span>=<span class="string">"blog"</span> &gt;</span>这是我的blog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><blockquote>
<p>有时候大家会在编译时遇见乱码等情况，本质上是编码与解码的不同意导致的。<br>常见的编码ASCII,ISO-8859-1,GBK,GB2312,UTF-8,ANSI<br>中国的浏览器默认采用GB2312<br>所以你要告诉浏览器你是什么编码</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span>   <span class="comment">&lt;!-- 表示编码是utf-8编码的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span> 这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h1 id="面对对象编程"><a href="#面对对象编程" class="headerlink" title="面对对象编程"></a>面对对象编程</h1><h2 id="什么叫面对对象编程"><a href="#什么叫面对对象编程" class="headerlink" title="什么叫面对对象编程"></a>什么叫面对对象编程</h2><h3 id="面对对象就是基于对象为中心，以类和继承为构造机制，来认识理解客观世界和设计，构造相应的软件系统。"><a href="#面对对象就是基于对象为中心，以类和继承为构造机制，来认识理解客观世界和设计，构造相应的软件系统。" class="headerlink" title="面对对象就是基于对象为中心，以类和继承为构造机制，来认识理解客观世界和设计，构造相应的软件系统。"></a>面对对象就是基于对象为中心，以类和继承为构造机制，来认识理解客观世界和设计，构造相应的软件系统。</h3><blockquote>
<p>简易的理解面对对象就是了解事情的<strong>属性和方法</strong><br>例如 斗地主你需要了解地主的属性也就是特征—-地主比较胖，地主有小胡子，地主很有钱<br>还要了解地主的方法也就是行为—-摸牌，看牌，初排等等<br>把他们用变量和函数表示出来就是面对对象编程</p>
</blockquote>
<h3 id="注意：面对对象编程只是一种思维逻辑代码并不会少写。"><a href="#注意：面对对象编程只是一种思维逻辑代码并不会少写。" class="headerlink" title="注意：面对对象编程只是一种思维逻辑代码并不会少写。"></a>注意：面对对象编程只是一种思维逻辑代码并不会少写。</h3><h2 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h2><p> 1.类是将抽象转化为用户定义类型的工具<br> 2.将数据表示和操作数据方法成为一个整体<br> 3.类的实例是对象<br> 4.类的变量和函数成为成员<br> <strong>简洁点理解就是使变量和对应函数放在一起的东西叫类</strong><br> eg.<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">地主类</span><br><span class="line">数据类型：名称，积分，胡子形态，身材</span><br><span class="line">成员变量：打牌动作，摸牌动作，看牌动作</span><br></pre></td></tr></table></figure></p>
<h3 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h3><h4 id="类有两种声明方式"><a href="#类有两种声明方式" class="headerlink" title="类有两种声明方式"></a>类有两种声明方式</h4><p>1.class类名{}; ———- class landOwner {};<br>2.struct类名{};————struct landOwner{};</p>
<h4 id="两种区别"><a href="#两种区别" class="headerlink" title="两种区别"></a>两种区别</h4><blockquote>
<p>class默认类型是私有的<br>struct默认类型是共有的</p>
</blockquote>
<h4 id="具体声明函数例子"><a href="#具体声明函数例子" class="headerlink" title="具体声明函数例子"></a>具体声明函数例子</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&#123;</span></span><br><span class="line">修饰符<span class="number">1</span>：</span><br><span class="line">        变量<span class="number">1</span>类型名称;  </span><br><span class="line">        变量<span class="number">2</span>类型名称;</span><br><span class="line">修饰符<span class="number">2</span>：</span><br><span class="line">        函数<span class="number">1</span>返回值类型 函数<span class="number">1</span>名称;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">landOwner</span>&#123;</span></span><br><span class="line">            <span class="keyword">public</span>:</span><br><span class="line">                    <span class="built_in">string</span> name;</span><br><span class="line">                    <span class="keyword">long</span> score;</span><br><span class="line">            <span class="keyword">public</span>:</span><br><span class="line">                    <span class="function"><span class="keyword">void</span> <span class="title">showscore</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 类名::函数名()&#123;</span><br><span class="line">    <span class="comment">//函数操作;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LandOwer::ShowScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; score &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><h3 id="public-修饰的成员在所有地方都可以访问"><a href="#public-修饰的成员在所有地方都可以访问" class="headerlink" title="public  修饰的成员在所有地方都可以访问"></a>public  修饰的成员在所有地方都可以访问</h3><h3 id="private-修饰的成员只能在类中或友元函数中访问"><a href="#private-修饰的成员只能在类中或友元函数中访问" class="headerlink" title="private 修饰的成员只能在类中或友元函数中访问"></a>private 修饰的成员只能在类中或友元函数中访问</h3><h3 id="protect-修饰的成员可以在类中友元函数，子类中访问"><a href="#protect-修饰的成员可以在类中友元函数，子类中访问" class="headerlink" title="protect 修饰的成员可以在类中友元函数，子类中访问"></a>protect 修饰的成员可以在类中友元函数，子类中访问</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 &#123;</span></span><br><span class="line">    修饰符：</span><br><span class="line">        成员列表;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="什么是封装"><a href="#什么是封装" class="headerlink" title="什么是封装"></a>什么是封装</h3><blockquote>
<p>把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。</p>
</blockquote>
<h3 id="使用Get和Set实现封装"><a href="#使用Get和Set实现封装" class="headerlink" title="使用Get和Set实现封装"></a>使用Get和Set实现封装</h3><h4 id="Get和Set是为了对函数进行限制所添加的语句"><a href="#Get和Set是为了对函数进行限制所添加的语句" class="headerlink" title="Get和Set是为了对函数进行限制所添加的语句"></a>Get和Set是为了对函数进行限制所添加的语句</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">Getscore</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Setscore</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断语句;</span></span><br><span class="line">    score = val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="什么是构造函数"><a href="#什么是构造函数" class="headerlink" title="什么是构造函数"></a>什么是构造函数</h3><blockquote>
<p>以类名作为函数名，无返回值类型</p>
</blockquote>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote>
<p>初始化对象数据成员<br>编译器自动调用函数进行初始化</p>
</blockquote>
<h3 id="构造函数类型"><a href="#构造函数类型" class="headerlink" title="构造函数类型"></a>构造函数类型</h3><blockquote>
<p>1.无参构造<br>2.一般构造<br>3.拷贝构造</p>
</blockquote>
<h4 id="1-无参数构造"><a href="#1-无参数构造" class="headerlink" title="1. 无参数构造"></a>1. 无参数构造</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LandownerV4</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        LandowerV4();<span class="comment">//无参函数定义</span></span><br><span class="line">        <span class="comment">//另一种写法 LandowerV4 = default;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LandOwner :: LandownerV4()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"landowner的无参函数构造调用"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：<br>1 如果创建的类中没书写任何构造函数，系统默认分配无参函数<br> 2如果书写了构造函数则系统不在生成，，如需生成默认构造，需要自己写出来。</p>
</blockquote>
<h4 id="2-一般构造"><a href="#2-一般构造" class="headerlink" title="2.一般构造"></a>2.一般构造</h4><h5 id="一般构造格式"><a href="#一般构造格式" class="headerlink" title="一般构造格式"></a>一般构造格式</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">类名::构造(类型<span class="number">1</span> 参数<span class="number">1</span>，类型<span class="number">2</span> 参数<span class="number">2.</span>......)&#123;</span><br><span class="line">    <span class="comment">//相关初始化代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student(<span class="built_in">string</span> name,<span class="built_in">string</span>,desc)&#123;</span><br><span class="line">    _name = name;<span class="comment">//Set(name);等价写法</span></span><br><span class="line">    _desc = desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student*stu=<span class="keyword">new</span> Student(<span class="string">"撒贝宁，北大还行"</span>);</span><br><span class="line">stu-&gt;ShowInfo();</span><br><span class="line"><span class="comment">//带参构造与函数重载要求一样。</span></span><br></pre></td></tr></table></figure>
<h4 id="拷贝构造"><a href="#拷贝构造" class="headerlink" title="拷贝构造"></a>拷贝构造</h4><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><h3 id="什么是析构函数"><a href="#什么是析构函数" class="headerlink" title="什么是析构函数"></a>什么是析构函数</h3><blockquote>
<p>对象过过期时自动调用的特殊成员函数<br>析构函数一般用来完成清理任务<br>析构函数是在构造函数前面加上~</p>
<blockquote>
<p>析构函数没有参数，只能有一个</p>
</blockquote>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~student()&#123;</span><br><span class="line">    delet scores;<span class="comment">//释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：析构函数用来释放对象使用资源，不是销毁资源。<br>无论何时一个对象被销毁，都会自动调用其析构函数。</p>
</blockquote>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.3.23学习任务</title>
    <url>/2020-3-23%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1/2020-3-23%E5%AD%A6%E4%B9%A0%E4%BB%BB%E5%8A%A1.html</url>
    <content><![CDATA[<h1 id="代码练习任务"><a href="#代码练习任务" class="headerlink" title="代码练习任务"></a>代码练习任务</h1><blockquote>
<h2 id="1-先花时间把前天学过的15-1-15-7前面代码用笔写3遍-2h的时间"><a href="#1-先花时间把前天学过的15-1-15-7前面代码用笔写3遍-2h的时间" class="headerlink" title="1.先花时间把前天学过的15.1-15.7前面代码用笔写3遍(2h的时间)"></a>1.先花时间把前天学过的15.1-15.7前面代码用笔写3遍(2h的时间)</h2><h2 id="2-肝视频-每看完一个视频，将代码打三遍-每1h休息15分钟-5小时学习量-休30分钟"><a href="#2-肝视频-每看完一个视频，将代码打三遍-每1h休息15分钟-5小时学习量-休30分钟" class="headerlink" title="2.肝视频 每看完一个视频，将代码打三遍   每1h休息15分钟  5小时学习量 休30分钟"></a>2.肝视频 每看完一个视频，将代码打三遍   每1h休息15分钟  5小时学习量 休30分钟</h2><h2 id="3-中午晚上吃饭休息1h"><a href="#3-中午晚上吃饭休息1h" class="headerlink" title="3.中午晚上吃饭休息1h"></a>3.中午晚上吃饭休息1h</h2><h2 id="4-到16-7截止学习"><a href="#4-到16-7截止学习" class="headerlink" title="4.到16.7截止学习"></a>4.到16.7截止学习</h2></blockquote>
<h1 id="英语学习任务"><a href="#英语学习任务" class="headerlink" title="英语学习任务"></a>英语学习任务</h1><blockquote>
<h2 id="1-3-4小时学英语，外刊课程和单词背诵-晚上7点开始"><a href="#1-3-4小时学英语，外刊课程和单词背诵-晚上7点开始" class="headerlink" title="1. 3-4小时学英语，外刊课程和单词背诵(晚上7点开始)"></a>1. 3-4小时学英语，外刊课程和单词背诵(晚上7点开始)</h2></blockquote>
<h1 id="身体训练"><a href="#身体训练" class="headerlink" title="身体训练"></a>身体训练</h1><blockquote>
<h2 id="1-9点训练"><a href="#1-9点训练" class="headerlink" title="1. 9点训练"></a>1. 9点训练</h2></blockquote>
<h1 id="教是最好的学"><a href="#教是最好的学" class="headerlink" title="教是最好的学"></a>教是最好的学</h1><blockquote>
<h3 id="每两天把学会的东西简单分享上来"><a href="#每两天把学会的东西简单分享上来" class="headerlink" title="每两天把学会的东西简单分享上来"></a>每两天把学会的东西简单分享上来</h3></blockquote>
]]></content>
      <categories>
        <category>变强的计划</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在15分钟内熟练掌握Markdown所有语法</title>
    <url>/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8markdown.html</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=520 height=86 src="//music.163.com/outchain/player?type=2&id=785887&auto=0&height=66"></iframe>

<h1 id="一-认识Markdown"><a href="#一-认识Markdown" class="headerlink" title="一.认识Markdown"></a>一.认识Markdown</h1><blockquote>
<p>Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。—维基百科</p>
</blockquote>
<p>看完是不是有点懵，用民间的说法就是<strong>其实markdown就是一个文本编辑器，让人可以不依赖鼠标就可以编写出你想要格式的文本编辑器。</strong></p>
<h1 id="二-基础语法"><a href="#二-基础语法" class="headerlink" title="二.基础语法"></a>二.基础语法</h1><p>##1. 标题</p>
<h3 id="Markdown-的标题只需要在文本前面加上-就可以了，几级标题加几个＃-最多支持6级标题"><a href="#Markdown-的标题只需要在文本前面加上-就可以了，几级标题加几个＃-最多支持6级标题" class="headerlink" title="Markdown 的标题只需要在文本前面加上#就可以了，几级标题加几个＃,最多支持6级标题."></a>Markdown 的标题只需要在文本前面加上#就可以了，几级标题加几个＃,最多支持6级标题.</h3><blockquote>
<p> #一级标题<br>##二级标题<br>###三级标题<br>####四级标题<br>#####五级标题<br>######六级标题</p>
</blockquote>
<h2 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h2><h3 id="Markdown支持两种列表-有序列表-和-无序列表"><a href="#Markdown支持两种列表-有序列表-和-无序列表" class="headerlink" title="Markdown支持两种列表 有序列表 和 无序列表"></a>Markdown支持两种列表 <strong>有序列表</strong> 和 <strong>无序列表</strong></h3><h4 id="有序列表—就在文字前面加上编号和-就行了"><a href="#有序列表—就在文字前面加上编号和-就行了" class="headerlink" title="有序列表—就在文字前面加上编号和.就行了"></a>有序列表—就在文字前面加上编号和.就行了</h4><h5 id="例如"><a href="#例如" class="headerlink" title="例如:"></a>例如:</h5><blockquote>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
<li>有序列表3</li>
</ol>
</blockquote>
<h4 id="无序列表-—文字前面加上-“-“-就ok了"><a href="#无序列表-—文字前面加上-“-“-就ok了" class="headerlink" title="无序列表 —文字前面加上 “ - “ 就ok了"></a>无序列表 —文字前面加上 “ - “ 就ok了</h4><blockquote>
<ul>
<li>无序列表1  </li>
<li>无序列表2</li>
<li>无序列表3</li>
</ul>
</blockquote>
<h2 id="3-斜体和加粗"><a href="#3-斜体和加粗" class="headerlink" title="3.斜体和加粗"></a>3.斜体和加粗</h2><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><h4 id="文字左右各一个”-“-就完成了-例如-斜体"><a href="#文字左右各一个”-“-就完成了-例如-斜体" class="headerlink" title="文字左右各一个” * “ 就完成了   例如: * 斜体 *"></a>文字左右各一个” * “ 就完成了   例如: * 斜体 *</h4><blockquote>
<p><em>斜体</em></p>
</blockquote>
<h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><h4 id="文字左右各两个”-“就完成了-例如-粗体"><a href="#文字左右各两个”-“就完成了-例如-粗体" class="headerlink" title="文字左右各两个” * “就完成了    例如: ** 粗体 **"></a>文字左右各两个” * “就完成了    例如: ** 粗体 **</h4><blockquote>
<p><strong>粗体</strong><br>##4. 引用</p>
</blockquote>
<h3 id="我们可能需要在文章中引用别人的文章-句子-代码……-这个标签就尤为重要了"><a href="#我们可能需要在文章中引用别人的文章-句子-代码……-这个标签就尤为重要了" class="headerlink" title="我们可能需要在文章中引用别人的文章,句子,代码…….这个标签就尤为重要了"></a>我们可能需要在文章中引用别人的文章,句子,代码…….这个标签就尤为重要了</h3><h3 id="我们只需要在前面加上-“-gt-“就完成了"><a href="#我们只需要在前面加上-“-gt-“就完成了" class="headerlink" title="我们只需要在前面加上 “ &gt; “就完成了."></a>我们只需要在前面加上 “ &gt; “就完成了.</h3><blockquote>
<p> 这个是效果</p>
</blockquote>
<h2 id="5-代码块"><a href="#5-代码块" class="headerlink" title="5. 代码块"></a>5. 代码块</h2><h3 id="对于程序员来说-能用Markdown书写代码尤为重要-嘻嘻-毕竟创作之初就是用来书写代码的嘛"><a href="#对于程序员来说-能用Markdown书写代码尤为重要-嘻嘻-毕竟创作之初就是用来书写代码的嘛" class="headerlink" title="对于程序员来说,能用Markdown书写代码尤为重要(嘻嘻~ 毕竟创作之初就是用来书写代码的嘛)"></a>对于程序员来说,能用Markdown书写代码尤为重要(嘻嘻~ 毕竟创作之初就是用来书写代码的嘛)</h3><h4 id="那么格式是"><a href="#那么格式是" class="headerlink" title="那么格式是:"></a>那么格式是:</h4><blockquote>
<p> <strong>``` key</strong><br>   <strong>代码块</strong><br>   <strong>```</strong></p>
</blockquote>
<p>例如:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"hello,world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>language</th>
<th>key</th>
</tr>
</thead>
<tbody><tr>
<td>C++</td>
<td>cpp</td>
</tr>
<tr>
<td>CSS</td>
<td>css</td>
</tr>
<tr>
<td>Django</td>
<td>django</td>
</tr>
<tr>
<td>HTTP</td>
<td>http</td>
</tr>
<tr>
<td>Java</td>
<td>java</td>
</tr>
<tr>
<td>XML,HTML</td>
<td>xml</td>
</tr>
</tbody></table>
<h2 id="6-分割线"><a href="#6-分割线" class="headerlink" title="6.分割线"></a>6.分割线</h2><h3 id="三个或者三个以上的-或者-都可以。"><a href="#三个或者三个以上的-或者-都可以。" class="headerlink" title="三个或者三个以上的 - 或者 * 都可以。"></a>三个或者三个以上的 - 或者 * 都可以。</h3><hr>
<h4 id="这个是效果"><a href="#这个是效果" class="headerlink" title="这个是效果"></a>这个是效果</h4><hr>
<h2 id="7-插入图片"><a href="#7-插入图片" class="headerlink" title="7.插入图片"></a>7.插入图片</h2><h3 id="为了使文章更有说服力，很多人会使用图片来加强理解"><a href="#为了使文章更有说服力，很多人会使用图片来加强理解" class="headerlink" title="为了使文章更有说服力，很多人会使用图片来加强理解"></a>为了使文章更有说服力，很多人会使用图片来加强理解</h3><blockquote>
<p>![图片alt](图片地址 ‘’图片title’’)<br>图片alt:图片下面的文字<br>图片地址：就是很单纯的图片地址<br>图片title： 鼠标移动到图片上面时候显示的东西</p>
</blockquote>
<p><img src="/images/markdown.jpg" alt="就是这个样子"></p>
<h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><h3 id="上面的语言和关键字就是用表格实现的"><a href="#上面的语言和关键字就是用表格实现的" class="headerlink" title="上面的语言和关键字就是用表格实现的"></a>上面的语言和关键字就是用表格实现的</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">name | <span class="number">111</span> | <span class="number">222</span> | <span class="number">333</span> | <span class="number">444</span></span><br><span class="line">- | :-: | :-: | :-: | -:</span><br><span class="line">aaa | bbb | ccc | ddd | eee| </span><br><span class="line">fff | ggg| hhh | iii | <span class="number">000</span>|</span><br></pre></td></tr></table></figure>
<p>呈现效果就是这样的：</p>
<table>
<thead>
<tr>
<th>name</th>
<th align="center">111</th>
<th align="center">222</th>
<th align="center">333</th>
<th align="right">444</th>
</tr>
</thead>
<tbody><tr>
<td>aaa</td>
<td align="center">bbb</td>
<td align="center">ccc</td>
<td align="center">ddd</td>
<td align="right">eee</td>
</tr>
<tr>
<td>fff</td>
<td align="center">ggg</td>
<td align="center">hhh</td>
<td align="center">iii</td>
<td align="right">000</td>
</tr>
</tbody></table>
<h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h1><h3 id="这些是Markdown基础用法，如何各位在生活或工作中还需要更全面的Markdown的教学，请自行查案看Markdown官方文档-https-markdown-zh-readthedocs-io-en-latest"><a href="#这些是Markdown基础用法，如何各位在生活或工作中还需要更全面的Markdown的教学，请自行查案看Markdown官方文档-https-markdown-zh-readthedocs-io-en-latest" class="headerlink" title="这些是Markdown基础用法，如何各位在生活或工作中还需要更全面的Markdown的教学，请自行查案看Markdown官方文档 https://markdown-zh.readthedocs.io/en/latest/"></a>这些是Markdown基础用法，如何各位在生活或工作中还需要更全面的Markdown的教学，请自行查案看Markdown官方文档 <a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://markdown-zh.readthedocs.io/en/latest/</a></h3>]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
</search>
